@*@model IEnumerable<EasyPort.Models.EasyPortData.IncomeExpenses>*@
@model IEnumerable<IGrouping<string, EasyPort.Models.EasyPortData.IncomeExpenses>>

@{
    ViewData["Title"] = "Index";
    DateTime s = ViewBag.sDate;
    DateTime e = ViewBag.eDate;
    decimal totalIncome = 0;
    decimal totalExpenses = 0;
    decimal totalOwing = 0;
    decimal totalPaid = 0;
    decimal totalCost = 0;
}

@if (Model.Count() > 0)
{
    foreach (var item in Model)
    {
        if (item.Key.ToUpper() == "INCOME")
        {
            totalIncome += item.Sum(c => c.Amount);
            totalCost += item.Sum(c => c.TotalCost);
        }
        else if (item.Key.ToUpper() == "EXPENSES")
        {
            totalExpenses += item.Sum(c => c.Amount);
        }
        else if (item.Key.ToUpper() == "OWING")
        {
            totalOwing += item.Sum(c => c.Amount);
        }
        else if (item.Key.ToUpper() == "PAYMENT")
        {
            totalPaid += item.Sum(c => c.Amount);
        }
    }
}

<div class="row title-container">
    <div class="col">
        <h5>Income/Expenses Reports</h5>
    </div>
    <div class="col">
        <div class="search-text" style="float: right;">
            <form method="post" action="/IncomeExpenses/Index">
                <input type="hidden" id="sDate" name="sDate" value="@DateTime.UtcNow.ToString("dd/MM/yyyy")" />
                <input type="hidden" id="eDate" name="eDate" value="@DateTime.UtcNow.ToString("dd/MM/yyyy")" />
                <div class="input-con">
                    <div id="reportrange" style="cursor: pointer; padding-top: 3px; font-size: 13px;">
                        <i class="fa fa-calendar"></i>&nbsp;
                        <span></span> <i class="fa fa-caret-down"></i>
                    </div>
                    <button type="submit">Get Record</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-4">
        <h6>@ViewBag.Period</h6>
    </div>
    <div class="col-sm-8">
        <div class="row">
            <dl class="col row" style="font-size: 14px;">
                <dt class="col-sm-6">Total Income: </dt>
                <dd class="col-sm-6">@totalIncome.ToString("n2")</dd>
                <dt class="col-sm-6">Total Cost: </dt>
                <dd class="col-sm-6">@totalCost.ToString("n2")</dd>
                <dt class="col-sm-6">Total Expenses: </dt>
                <dd class="col-sm-6">@totalExpenses.ToString("n2")</dd>
            </dl>
            <dl class="col row" style="font-size: 14px;">
                <dt class="col-sm-6">Total Owing: </dt>
                <dd class="col-sm-6">@totalOwing.ToString("n2")</dd>
                <dt class="col-sm-6">Total Owing Payment: </dt>
                <dd class="col-sm-6">@totalPaid.ToString("n2")</dd>
            </dl>
        </div>
    </div>
</div>

<div class="table100 ver5 m-b-110">
    <table data-vertable="ver5">
        <thead>
            <tr class="row100 head">
                <th class="column100 column1" data-column="column1"></th>
                <th class="column100 column2" data-column="column2">Amount</th>
                <th class="column100 column3" data-column="column3">Cost</th>
                <th class="column100 column5" data-column="column5">Transaction Date</th>
                <th class="column100 column6" data-column="column6">Date Uploaded</th>
            </tr>
        </thead>
        <tbody>

            @if (Model.Count() > 0)
            {
                foreach (var item in Model)
                {
                    <tr class="row100">
                        <td colspan="20" class="text-center"><b>@item.Key.ToUpper()</b></td>
                    </tr>
                    foreach (var itm in item.ToList())
                    {
                    <tr class="row100">
                        <td class="column100 column1" data-column="column1">@itm.Purpose</td>
                        <td class="column100 column2" data-column="column2">@itm.Amount.ToString("n2")</td>
                        <td class="column100 column3" data-column="column3">@itm.TotalCost.ToString("n2")</td>
                        <td class="column100 column5" data-column="column5">@itm.Date.ToString("MMM dd, yyyy")</td>
                        <td class="column100 column6" data-column="column6">@itm.EntryDate.ToString("MMM dd, yyyy")</td>
                    </tr>
                    }

                }
                    @*<tr class="row100">
                        <td class="column100 column7" data-column="column7"><b>Total</b></td>
                        <td colspan="1" class="column100 column8" data-column="column8"><b>@((totalIncome + totalExpenses).ToString("n2"))</b></td>
                        <td colspan="2" class="column100 column8" data-column="column98"><b>@totalCost.ToString("n2")</b></td>
                    </tr>*@
            }


        </tbody>
    </table>
</div>





@section Scripts{
    <script type="text/javascript">
        $(function () {
            var start = moment('@s',"DD/MM/YYYY"); //moment();//.subtract(29, 'days');
            var end = moment('@e', "DD/MM/YYYY"); //moment();

            function cb(start, end) {
                //alert(start);
                $('#sDate').val(start.format('DD/MM/YYYY'));
                $('#eDate').val(end.format('DD/MM/YYYY'));
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
            }

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                opens: 'left',
                autoApply: true,
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);

            cb(start, end);

        });
    </script>
}




